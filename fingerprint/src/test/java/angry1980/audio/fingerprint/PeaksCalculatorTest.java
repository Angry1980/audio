package angry1980.audio.fingerprint;

import angry1980.audio.ClassPathAdapter;
import angry1980.audio.model.*;
import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static junit.framework.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

public class PeaksCalculatorTest {

    private static Map<Long, long[]> hashes = ImmutableMap.of(
        1L, new long[]{19210604240L, 19210604240L, 19212804240L, 20615004240L, 17014606440L, 18412807440L, 22412808440L, 19214010040L, 22816604240L, 22815606440L, 23415208240L, 19216406440L, 19210605640L, 23211606440L, 19212805840L, 19610608840L, 19615209640L, 17014806440L, 17815407640L, 18210804240L, 23414408440L, 23414806240L, 19214408440L, 18610608440L, 19215008640L, 17012006840L, 19412007840L, 19611606440L, 22616404240L, 20413610440L, 21213404240L, 18215009640L, 22010606440L, 21611808440L, 20411606440L, 23415410440L, 23413209440L, 21416607640L, 19213204640L, 18211608240L, 19412808440L, 21612409640L, 18813206640L, 20612004440L, 21815408640L, 23414210040L, 19812405240L, 18216006440L, 21213007640L, 22814805040L, 22613207040L, 22616805840L, 21610806840L, 17614004840L, 20410806240L, 22412810440L, 22415204240L, 21212408640L, 23414808440L, 21815604440L, 17016208040L, 20412010240L, 21212808440L, 19017006440L, 21212806240L, 19212608440L, 23411807640L, 17014810040L, 19411408640L, 19410605040L, 22411008240L, 17611805040L, 18414405240L, 19215009840L, 17812406440L, 21211406440L, 18612808640L, 22013607240L, 18416208840L, 21012408040L, 23212809840L, 17010604840L, 21610610040L, 17010609240L, 19014608440L, 23215404440L, 23013810040L, 17811410240L, 17016808240L, 18416609440L, 17411206240L, 21810604440L, 20015208440L, 23014209040L, 17015408440L, 19615409240L, 17816409040L, 19210607640L, 20011007240L, 19815009440L, 23417010440L, 21616005840L, 20015209640L, 21411008040L, 23414805040L, 23216206440L, 19216006040L, 23410604440L, 17015008440L, 22616406440L, 23416204240L, 17813010440L, 23216804240L, 22410606440L, 21011009240L, 18815206440L, 20816009240L, 17612807040L, 21214608440L, 19414207240L, 19812804240L, 23411608440L, 22414810440L, 17015808240L, 19815804440L, 17411008240L, 23013007040L, 19211608640L, 23416605840L, 20617004240L, 21216804040L, 17815805840L, 17014007840L, 21814804640L, 19812806440L, 18816007040L, 19412805840L, 22012807840L, 22413005240L, 19212405440L, 23215004440L, 21216806240L, 21213206640L, 19617008640L, 17210604840L, 22413406440L, 19815607440L, 18215007040L, 22616610240L, 23013809840L, 21415810440L, 22814606440L, 17814806040L, 23210806440L, 21217005240L, 17014204240L, 20213004440L, 17010605840L, 19610608640L, 23212808440L, 17815204840L, 19410604240L, 19414809040L, 19215008640L, 21213006440L, 23413809040L, 19815010240L, 23010604240L, 19210606440L, 23414205440L, 22411210240L, 19815604240L, 19212804240L, 18210605840L, 21212806840L, 21216606640L, 22414806040L, 18614005240L, 19213406440L, 19212604240L, 18814609640L, 20415205840L, 20812810440L, 22611007440L, 17615809640L, 23412805840L, 22415208440L, 20412804640L, 21212206840L, 23414407440L, 18411808640L, 22015010240L, 17814610040L, 19213604240L, 21211608440L, 23411010240L, 23013807640L, 22814805640L, 20614404240L, 17012805840L, 20815008040L, 20613807040L, 21811008240L, 21012808440L, 17612806440L, 18012804240L, 23414810040L, 21210609240L, 19615609440L, 21410804440L, 17613805640L, 23415808240L, 20612805640L, 19416604040L, 22414208440L, 17210607040L, 19614206440L, 19613008640L, 17012805040L, 19211205840L, 17414809840L, 19814809640L, 19012610440L, 21212008440L, 23210607440L, 20011404840L, 21217005440L, 20610605240L, 17012805440L, 19013009440L, 22816206040L, 20816004440L, 22615808440L, 23410608240L, 17810604240L, 23013606840L, 21213206440L, 17211205040L, 20015808240L, 17012206040L, 23415006240L, 19415404640L, 17611006440L, 21810609440L, 18212810440L, 23011808040L, 19215205440L, 21214208440L, 21213010040L, 19013805440L, 21811205440L, 17014406440L, 19015208640L, 19815208840L, 22214405040L, 20810606440L, 17216004240L, 22810610040L, 17412809640L, 18014804840L, 19214010240L, 17012205240L, 23013806440L, 21212605440L, 19414005440L, 21815810040L, 19611607640L, 17216408640L, 17011009040L, 21214604240L, 17012805040L, 17214808440L, 21411608040L, 19614608440L, 19814404840L, 17816608440L, 17012808440L, 19210605640L, 23416809240L, 18016005840L, 22413008240L, 17215404640L, 21215607840L, 23016406440L, 20814608840L, 18813408640L, 19414808240L, 19216806640L, 22012409640L, 20811808040L, 18016808640L, 18014810440L, 19212806440L, 20614807440L, 21812808440L, 18611208440L, 18610608240L, 20214806240L, 18015206640L, 19814608640L, 21611406040L, 20614807040L, 17416606040L, 20815804840L, 18011804440L, 17014806640L, 17812810040L, 17014808640L, 17013408440L, 23215409240L, 19210610240L, 20016806240L, 19414807640L, 19016805240L, 21412808840L, 19215610040L, 18012409640L, 22410606440L, 19211206440L, 23410608440L, 23010609840L, 18616406440L, 17813804040L, 19213804840L, 20410604240L, 19215006440L, 17011404240L, 22614806440L, 17412408440L, 19210606440L, 21615008240L, 23412204640L, 20013005440L, 23414804440L, 23410604240L, 19212804240L, 19212804240L, 19210604240L, 19212804240L}
    );

    private Track track1;
    private PeaksCalculator calculator;

    @Before
    public void init(){
        calculator = new PeaksCalculator(new ClassPathAdapter());
        track1 = ImmutableTrack.builder().id(1).cluster(0).path("/test1.mp3").build();
    }

    @Test
    public void testTrack1(){
        List<TrackHash> hashes = getHashes(track1.getId());
        Optional<Fingerprint> f = calculator.calculate(track1);
        assertTrue(f.isPresent());
        List<TrackHash> result = f.get().getHashes();
        assertNotNull(result);
        assertTrue(result.size() == hashes.size());
        IntStream.range(0, result.size()).forEach(i -> assertEquals(result.get(i), hashes.get(i)));
    }

    private List<TrackHash> getHashes(long trackId){
        AtomicInteger time = new AtomicInteger();
        return Arrays.stream(hashes.get(trackId))
                .mapToObj(hash -> ImmutableTrackHash.builder().trackId(trackId).time(time.getAndIncrement()).hash(hash).build())
                .collect(Collectors.toList());
    }
}
